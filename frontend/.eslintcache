[{"C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\index.js":"1","C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\App.js":"3","C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\components\\upload-files.component.js":"4","C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\services\\upload-files.service.js":"5","C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\http-common.js":"6","C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\components\\draw-image-component.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":538,"mtime":1609695783489,"results":"11","hashOfConfig":"9"},{"size":3059,"mtime":1609652387227,"results":"12","hashOfConfig":"9"},{"size":421,"mtime":1609652053122,"results":"13","hashOfConfig":"9"},{"size":160,"mtime":1609608107410,"results":"14","hashOfConfig":"9"},{"size":2351,"mtime":1609695560024,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"fzgjmz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\index.js",[],["33","34"],"C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\App.js",[],"C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\components\\upload-files.component.js",["35"],"import React, { Component } from \"react\";\r\nimport UploadService from \"../services/upload-files.service\";\r\n\r\nexport default class UploadFiles extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\tthis.uploadFiles = this.uploadFiles.bind(this);\r\n\t\r\n    this.state = {\r\n      selectedFiles: undefined,\r\n      message: [],\r\n\r\n      fileInfos: [],\r\n    };\r\n  }\r\n  selectFile(event) {\r\n\t  \r\n    this.setState({\r\n      selectedFiles: event.target.files,\r\n    });\r\n  }\r\n  \r\n  uploadFiles() {\r\n    const selectedFiles = this.state.selectedFiles;\r\n\r\n    this.setState(\r\n      {\r\n        message: [],\r\n      },\r\n      () => {\r\n        for (let i = 0; i < selectedFiles.length; i++) {\r\n          this.upload(i, selectedFiles[i]);\r\n        }\r\n      }\r\n    );\r\n  }\r\n  \r\n  upload(idx, file) {\r\n\r\n    UploadService.upload(file).then((response) => {\r\n        this.setState((prev) => {\r\n          let nextMessage = [...prev.message, \"Uploaded the file successfully: \" + file.name];\r\n          return {\r\n            message: nextMessage\r\n          };\r\n        });\r\n\r\n        return UploadService.getFiles();\r\n      })\r\n      .then((files) => {\r\n        this.setState({\r\n          fileInfos: files.data,\r\n        });\r\n      })\r\n      .catch(() => {\r\n        this.setState((prev) => {\r\n          let nextMessage = [...prev.message, \"Could not upload the file: \" + file.name];\r\n          return {\r\n            message: nextMessage\r\n          };\r\n        });\r\n      });\r\n  }\r\n  \r\n  componentDidMount() {\r\n    UploadService.getFiles().then((response) => {\r\n      this.setState({\r\n        fileInfos: response.data,\r\n      });\r\n    });\r\n  }\r\n  \r\n  render() {\r\n\t  const { selectedFiles, message, fileInfos } = this.state;\r\n\t  return (\r\n      <div>\r\n        <div className=\"row my-3\">\r\n          <div className=\"col-8\">\r\n            <label className=\"btn btn-default p-0\">\r\n              <input type=\"file\" multiple onChange={(event) => this.selectFile(event)}/>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"col-4\">\r\n            <button\r\n              className=\"btn btn-success btn-sm \"\r\n              disabled={!selectedFiles}\r\n              onClick={this.uploadFiles}\r\n            >\r\n              Upload\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {message.length > 0 && (\r\n          <div className=\"alert alert-secondary\" role=\"alert\">\r\n            <ul>\r\n              {message.map((item, i) => {\r\n                return <li key={i}>{item}</li>;\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">List of images</div>\r\n          <ul className=\"list-group list-group-flush\">\r\n            {fileInfos &&\r\n              fileInfos.reverse().map((file, index) => (\r\n                <li className=\"list-group-item\" key={index}>\r\n                  <img src={\"http://localhost:8000\"+file.images} width=\"50%\" height=\"50%\" />\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n\r\n\t  \r\n\r\n  }\r\n}","C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\services\\upload-files.service.js",[],"C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\http-common.js",[],"C:\\Users\\IT\\django_project\\extraMarks\\frontend\\src\\components\\draw-image-component.js",["36","37","38","39","40","41","42"],"import React, {Component, useState, useEffect} from 'react'\r\nimport {Line, SteppedLine, PolyLine, Circle, Rectangle} from 'draw-shape-reactjs';\r\nimport img from '../images/sample.jpg'\r\n\r\nconsole.log(img)\r\nclass DrawContainer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      x1: 0,\r\n      y1: 0,\r\n      x2: 0,\r\n      y2: 0\r\n    }\r\n\r\n    this.handleX1Change = this.handleX1Change.bind(this)\r\n    this.handleY1Change = this.handleY1Change.bind(this)\r\n    this.handleY2Change = this.handleY2Change.bind(this)\r\n\tthis.handleX2Change = this.handleX2Change.bind(this)\r\n    this.draw = this.draw.bind(this)\r\n    this.drawImage = this.drawImage.bind(this)\r\n\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas = document.getElementById('canvas')\r\n    this.ctx = this.canvas.getContext('2d')\r\n    this.canvasX = this.canvas.offsetLeft\r\n    this.canvasY = this.canvas.offsetTop\r\n  }\r\n\r\n  drawImage = () => {\r\n\t  console.log(img)\r\n\tthis.ctx.clearRect(0,0,800,500);\r\n    \r\n    //this.backgroundImage = new Image()\r\n\r\n    //this.backgroundImage.src = \"http://localhost:3000/static/media/sample.b3f53dcb.jpg\";\r\n\r\n    //this.backgroundImage.onload = function() {\r\n    //  this.ctx.drawImage(this.backgroundImage, 0, 0)\r\n    //}\r\n\tthis.draw()\r\n  }\r\n  draw = () => {\r\n    this.ctx.setLineDash([2])\r\n\r\n    this.ctx.strokeRect(this.state.x1, this.state.y1, this.state.x2, this.state.y2)\r\n  }\r\n\r\nhandleX1Change(e) {\r\n   this.setState({x1: e.target.value});\r\n   console.log(this.state.x1);\r\n}\r\nhandleY1Change(e) {\r\n   this.setState({y1: e.target.value});\r\n}\r\n\r\nhandleY2Change(e) {\r\n   this.setState({y2: e.target.value});\r\n}\r\nhandleX2Change(e) {\r\n   this.setState({x2: e.target.value});\r\n}\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n\t<div ><canvas id = \"canvas\" width = \"800\" height = \"500\" > </canvas>\r\n\t\r\n\t\t<form>\r\n          <input type=\"text\" name=\"x1\" placeholder=\"x1\"  onChange = {this.handleX1Change} />\r\n          <input type=\"text\" name=\"y1\" placeholder=\"y1\" onChange = {this.handleY1Change} />\r\n\t\t  <input type=\"text\" name=\"x2\" placeholder=\"x2\"   onChange = {this.handleX2Change} />\r\n\t\t  <input type=\"text\" name=\"y2\" placeholder=\"y2\"  onChange = {this.handleY2Change} />\r\n          <button type=\"button\" onClick={this.drawImage}>Draw Ractangle</button>\r\n        </form>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DrawContainer",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":111,"column":19,"nodeType":"49","endLine":111,"endColumn":93},{"ruleId":"50","severity":1,"message":"51","line":1,"column":27,"nodeType":"52","messageId":"53","endLine":1,"endColumn":35},{"ruleId":"50","severity":1,"message":"54","line":1,"column":37,"nodeType":"52","messageId":"53","endLine":1,"endColumn":46},{"ruleId":"50","severity":1,"message":"55","line":2,"column":9,"nodeType":"52","messageId":"53","endLine":2,"endColumn":13},{"ruleId":"50","severity":1,"message":"56","line":2,"column":15,"nodeType":"52","messageId":"53","endLine":2,"endColumn":26},{"ruleId":"50","severity":1,"message":"57","line":2,"column":28,"nodeType":"52","messageId":"53","endLine":2,"endColumn":36},{"ruleId":"50","severity":1,"message":"58","line":2,"column":38,"nodeType":"52","messageId":"53","endLine":2,"endColumn":44},{"ruleId":"50","severity":1,"message":"59","line":2,"column":46,"nodeType":"52","messageId":"53","endLine":2,"endColumn":55},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Line' is defined but never used.","'SteppedLine' is defined but never used.","'PolyLine' is defined but never used.","'Circle' is defined but never used.","'Rectangle' is defined but never used.","no-global-assign","no-unsafe-negation"]